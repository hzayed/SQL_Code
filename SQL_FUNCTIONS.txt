DECLARE 
 V_VAR1 VARCHAR2(20):='HELLO';
 V_NUM1 NUMBER(1) :=0;
 V_NUM2 NUMBER(1) :=1;

 
BEGIN 
DBMS_OUTPUT.PUT_LINE(V_VAR1);
DBMS_OUTPUT.PUT_LINE(V_NUM2/V_NUM1);

EXCEPTION 
WHEN ZERO_DIVIDE THEN 
DBMS_OUTPUT.PUT_LINE('DIVIDE BY ZERO');




end;

declare -- to print this sequance 2 4 6 8 10
step number (10) :=2;--10 mean the last no. , 2 mean the value of increament
begin
for counter in 1..5
loop
dbms_output.put_line(counter*step);
end loop;
end;






-- SELECT * FROM STUDENT;

--  V_VAR1 VARCHAR2(20):='HELLO';
--  V_NUM1 NUMBER(1) :=0;
--  V_NUM2 NUMBER(1) :=1;

-- CREATE A FUNCION
DECLARE 
 V_SCORE STUDENT.TOTAL_SCORE%TYPE;
 V_NAME STUDENT.NAMEI%TYPE;
BEGIN 
-- DBMS_OUTPUT.PUT_LINE(V_VAR1);
-- DBMS_OUTPUT.PUT_LINE(V_NUM2/V_NUM1);

SELECT NAMEI,TOTAL_SCORE 
INTO V_NAME,V_SCORE
FROM STUDENT WHERE IDI=3;
DBMS_OUTPUT.PUT_LINE(V_NAME);

EXCEPTION 
WHEN ZERO_DIVIDE THEN 
DBMS_OUTPUT.PUT_LINE('DIVIDE BY ZERO');
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('USER ID DOES NOT EXIST');
WHEN TOO_MANY_ROWS THEN
DBMS_OUTPUT.PUT_LINE('THE DATABASE RETURNS MORE THAN ONE ROW');
end;



--IF STATEMENT

DECLARE 
 V_SCORE STUDENT.TOTAL_SCORE%TYPE:=700;
 V_NAME STUDENT.NAMEI%TYPE;
BEGIN 
IF V_SCORE >500 THEN  
DBMS_OUTPUT.PUT_LINE('GREATER THAN 500');
END IF;
END;

--ELSE IF
DECLARE 
 V_SCORE STUDENT.TOTAL_SCORE%TYPE:=700;
 V_NAME STUDENT.NAMEI%TYPE;
BEGIN 
SELECT NAMEI,TOTAL_SCORE 
INTO V_NAME,V_SCORE
FROM STUDENT WHERE IDI=4;
IF V_SCORE >500 THEN  
DBMS_OUTPUT.PUT_LINE('GREATER THAN 500');
ELSE 
DBMS_OUTPUT.PUT_LINE('SMALLER THAN 500');
END IF;
END;


--ELSIF 

DECLARE 
 V_SCORE STUDENT.TOTAL_SCORE%TYPE:=700;
 V_NAME STUDENT.NAMEI%TYPE;
BEGIN 
SELECT NAMEI,TOTAL_SCORE 
INTO V_NAME,V_SCORE
FROM STUDENT WHERE IDI=5;

IF V_SCORE >500 THEN  
DBMS_OUTPUT.PUT_LINE('GREATER THAN 500');
ELSIF V_SCORE =500 THEN 
DBMS_OUTPUT.PUT_LINE('EQUAL TO 500');
ELSE 
DBMS_OUTPUT.PUT_LINE('SMALLER THAN 500');

END IF;
END;



DECLARE 
 V_SCORE STUDENT.TOTAL_SCORE%TYPE:=700;
 V_NAME STUDENT.NAMEI%TYPE;
BEGIN 
SELECT NAMEI,TOTAL_SCORE 
INTO V_NAME,V_SCORE
FROM STUDENT WHERE IDI=8;

IF V_SCORE >500 THEN  
DBMS_OUTPUT.PUT_LINE('GREATER THAN 500');
ELSIF V_SCORE =500 THEN 
DBMS_OUTPUT.PUT_LINE('EQUAL TO 500');
ELSE 
DBMS_OUTPUT.PUT_LINE('SMALLER THAN 500');

END IF;
EXCEPTION 
WHEN ZERO_DIVIDE THEN 
DBMS_OUTPUT.PUT_LINE('DIVIDE BY ZERO');
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('USER ID DOES NOT EXIST');
WHEN TOO_MANY_ROWS THEN
DBMS_OUTPUT.PUT_LINE('THE DATABASE RETURNS MORE THAN ONE ROW');
END;










--case statement

DECLARE 
 V_SCORE STUDENT.TOTAL_SCORE%TYPE:=700;
 V_NAME STUDENT.NAMEI%TYPE;
BEGIN 
SELECT NAMEI,TOTAL_SCORE 
INTO V_NAME,V_SCORE
FROM STUDENT WHERE IDI=3;

case V_SCORE  
when 600 then
DBMS_OUTPUT.PUT_LINE('GREATER THAN 500');
when 500 THEN 
DBMS_OUTPUT.PUT_LINE('EQUAL TO 500');
when 400 then 
DBMS_OUTPUT.PUT_LINE('SMALLER THAN 500');

END case ;
EXCEPTION 
WHEN ZERO_DIVIDE THEN 
DBMS_OUTPUT.PUT_LINE('DIVIDE BY ZERO');
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('USER ID DOES NOT EXIST');
WHEN TOO_MANY_ROWS THEN
DBMS_OUTPUT.PUT_LINE('THE DATABASE RETURNS MORE THAN ONE ROW');
END;

--LOOPS 

DECLARE 
STEP NUMBER(10) :=2;
BEGIN 
FOR COUNTER IN 1..9 LOOP 
DBMS_OUTPUT.PUT_LINE(COUNTER+STEP);
END LOOP;
END;

--CURSOR 

DECLARE 
STEP NUMBER(10)  :=2;
CURSOR MYSTUDENTS IS 
SELECT EMPNO,ENAME,DEPTNO,SAL
FROM SCOTT.EMP
WHERE DEPTNO=10 ;
BEGIN 
FOR COUNTER IN MYSTUDENTS LOOP 
 DBMS_OUTPUT.PUT_LINE(COUNTER.ENAME);
END LOOP;
END;

-- STUDENT (ADD MARKS)
DECLARE 
CURSOR MYSTUDENTS IS 
SELECT IDI,NAMEI ,TOTAL_SCORE
FROM STUDENT ;
BEGIN 
FOR COUNTER IN MYSTUDENTS LOOP 
UPDATE STUDENT
SET TOTAL_SCORE=TOTAL_SCORE+100
WHERE IDI=COUNTER.IDI ;
 DBMS_OUTPUT.PUT_LINE('UPDATED');
END LOOP;
END;



SELECT * FROM STUDENT



-- DECLARE 
-- CURSOR MYSTUDENTS IS 
-- SELECT IDI,NAMEI ,TOTAL_SCORE
-- FROM STUDENT ;
-- BEGIN 
-- FOR COUNTER IN MYSTUDENTS LOOP 
-- UPDATE STUDENT
-- SET TOTAL_SCORE=TOTAL_SCORE+100, NAMEI=CONCAT(NAMEI,' UPDATED')
-- WHERE IDI=COUNTER.IDI ;
--  DBMS_OUTPUT.PUT_LINE('UPDATED');
-- END LOOP;
-- END;

--LOOP WITH WHILE LOOP
DECLARE 
STEP NUMBER(10)  :=12;
CURSOR MYSTUDENTS IS 
SELECT IDI,NAMEI ,TOTAL_SCORE
FROM STUDENT ;
BEGIN 
FOR COUNTER IN MYSTUDENTS LOOP 
UPDATE STUDENT
SET TOTAL_SCORE=TOTAL_SCORE+100, NAMEI=CONCAT(NAMEI,' UPDATED')
WHERE IDI=COUNTER.IDI ;
 DBMS_OUTPUT.PUT_LINE('UPDATED');
END LOOP;
WHILE STEP>8 
LOOP
 DBMS_OUTPUT.PUT_LINE('WHILE');
 STEP:=STEP-1;
 END LOOP;


END;




DECLARE 
COUNTER NUMBER :=1;
BEGIN 
WHILE COUNTER <=8 
LOOP
 DBMS_OUTPUT.PUT_LINE('COUNTER: ' || COUNTER);
 COUNTER :=COUNTER+1;
 END LOOP;
 END;
