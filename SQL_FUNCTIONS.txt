DECLARE 
 V_VAR1 VARCHAR2(20):='HELLO';
 V_NUM1 NUMBER(1) :=0;
 V_NUM2 NUMBER(1) :=1;

BEGIN 
DBMS_OUTPUT.PUT_LINE(V_VAR1);
DBMS_OUTPUT.PUT_LINE(V_NUM2/V_NUM1);

EXCEPTION 
WHEN ZERO_DIVIDE THEN 
DBMS_OUTPUT.PUT_LINE('DIVIDE BY ZERO');

end;
--*********************the end of the block*****************
--****** this block to print this sequance (2,4,6,8,10)

declare 
step number (10) :=2;--10 mean the last no. , 2 mean the value of increament
begin
for counter in 1..5
loop
dbms_output.put_line(counter*step);
end loop;
end;
--****************************************************
SELECT * FROM STUDENT;
--***********************************************
-- *********CREATE A FUNCION*****************
 V_VAR1 VARCHAR2(20):='HELLO'; --initialize these variables  
 V_NUM1 NUMBER(1) :=0;
  V_NUM2 NUMBER(1) :=1;

DECLARE 
 V_SCORE STUDENT.TOTAL_SCORE%TYPE;-- initialize these two variable and set thier type
 V_NAME STUDENT.NAMEI%TYPE;
BEGIN 
-- DBMS_OUTPUT.PUT_LINE(V_VAR1);
-- DBMS_OUTPUT.PUT_LINE(V_NUM2/V_NUM1);

SELECT NAMEI,TOTAL_SCORE 
INTO V_NAME,V_SCORE
FROM STUDENT WHERE IDI=3;
DBMS_OUTPUT.PUT_LINE(V_NAME);

EXCEPTION 
WHEN ZERO_DIVIDE THEN 
DBMS_OUTPUT.PUT_LINE('DIVIDE BY ZERO');
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('USER ID DOES NOT EXIST');
WHEN TOO_MANY_ROWS THEN
DBMS_OUTPUT.PUT_LINE('THE DATABASE RETURNS MORE THAN ONE ROW');
end;
--**************************************************************
--******** create if statement***************
DECLARE 
 V_SCORE STUDENT.TOTAL_SCORE%TYPE:=700;
 V_NAME STUDENT.NAMEI%TYPE;
BEGIN 
IF V_SCORE >500 THEN  
DBMS_OUTPUT.PUT_LINE('GREATER THAN 500');
END IF;
END;
--*************************************
--*****create else if **************************
DECLARE 
 V_SCORE STUDENT.TOTAL_SCORE%TYPE:=700;
 V_NAME STUDENT.NAMEI%TYPE;
BEGIN 
SELECT NAMEI,TOTAL_SCORE 
INTO V_NAME,V_SCORE
FROM STUDENT WHERE IDI=4;
IF V_SCORE >500 THEN  
DBMS_OUTPUT.PUT_LINE('GREATER THAN 500');
ELSE 
DBMS_OUTPUT.PUT_LINE('SMALLER THAN 500');
END IF;
END;
--************************************************** 
--**********check if the value of "v_score" is greater or smaller or equal 500*****
DECLARE 
 V_SCORE STUDENT.TOTAL_SCORE%TYPE:=700;
 V_NAME STUDENT.NAMEI%TYPE;
BEGIN 
SELECT NAMEI,TOTAL_SCORE 
INTO V_NAME,V_SCORE
FROM STUDENT WHERE IDI=5;

IF V_SCORE >500 THEN  
DBMS_OUTPUT.PUT_LINE('GREATER THAN 500');
ELSIF V_SCORE =500 THEN 
DBMS_OUTPUT.PUT_LINE('EQUAL TO 500');
ELSE 
DBMS_OUTPUT.PUT_LINE('SMALLER THAN 500');

END IF;
END;
--****************************************************
--********************************
DECLARE 
 V_SCORE STUDENT.TOTAL_SCORE%TYPE:=700;
 V_NAME STUDENT.NAMEI%TYPE;
BEGIN 
SELECT NAMEI,TOTAL_SCORE 
INTO V_NAME,V_SCORE
FROM STUDENT WHERE IDI=8;

IF V_SCORE >500 THEN  
DBMS_OUTPUT.PUT_LINE('GREATER THAN 500');
ELSIF V_SCORE =500 THEN 
DBMS_OUTPUT.PUT_LINE('EQUAL TO 500');
ELSE 
DBMS_OUTPUT.PUT_LINE('SMALLER THAN 500');

END IF;
EXCEPTION 
WHEN ZERO_DIVIDE THEN 
DBMS_OUTPUT.PUT_LINE('DIVIDE BY ZERO');
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('USER ID DOES NOT EXIST');
WHEN TOO_MANY_ROWS THEN
DBMS_OUTPUT.PUT_LINE('THE DATABASE RETURNS MORE THAN ONE ROW');
END;
--*******************************************************
--*****************create case statement****************

DECLARE 
 V_SCORE STUDENT.TOTAL_SCORE%TYPE:=700;
 V_NAME STUDENT.NAMEI%TYPE;
BEGIN 
SELECT NAMEI,TOTAL_SCORE 
INTO V_NAME,V_SCORE
FROM STUDENT WHERE IDI=3;

case V_SCORE  
when 600 then
DBMS_OUTPUT.PUT_LINE('GREATER THAN 500');
when 500 THEN 
DBMS_OUTPUT.PUT_LINE('EQUAL TO 500');
when 400 then 
DBMS_OUTPUT.PUT_LINE('SMALLER THAN 500');

END case ;
EXCEPTION 
WHEN ZERO_DIVIDE THEN 
DBMS_OUTPUT.PUT_LINE('DIVIDE BY ZERO');
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('USER ID DOES NOT EXIST');
WHEN TOO_MANY_ROWS THEN
DBMS_OUTPUT.PUT_LINE('THE DATABASE RETURNS MORE THAN ONE ROW');
END;
--*******************************************************
--****print this sequance (3 4 5 6 7 8 9 10 11)****************** 

DECLARE 
STEP NUMBER(10) :=2;
BEGIN 
FOR COUNTER IN 1..9 LOOP 
DBMS_OUTPUT.PUT_LINE(COUNTER+STEP);
END LOOP;
END;
--*****************************************************
--***** crete a CURSOR to read data from table****************** 

DECLARE 
STEP NUMBER(10)  :=2;
CURSOR MYSTUDENTS IS 
SELECT EMPNO,ENAME,DEPTNO,SAL
FROM SCOTT.EMP
WHERE DEPTNO=10 ;
BEGIN 
FOR COUNTER IN MYSTUDENTS LOOP 
 DBMS_OUTPUT.PUT_LINE(COUNTER.ENAME);
END LOOP;
END;
--***************************************************
-- ***********create a cursor to update the data of the table************
-- STUDENT (ADD MARKS)
DECLARE 
CURSOR MYSTUDENTS IS 
SELECT IDI,NAMEI ,TOTAL_SCORE
FROM STUDENT ;
BEGIN 
FOR COUNTER IN MYSTUDENTS LOOP 
UPDATE STUDENT
SET TOTAL_SCORE=TOTAL_SCORE+100
WHERE IDI=COUNTER.IDI ;
 DBMS_OUTPUT.PUT_LINE('UPDATED');
END LOOP;
END;
--**********************************************************
SELECT * FROM STUDENT
--***create caursor in order to update the data of the student table*******************
DECLARE 
CURSOR MYSTUDENTS IS 
SELECT IDI,NAMEI ,TOTAL_SCORE
FROM STUDENT ;
BEGIN 
FOR COUNTER IN MYSTUDENTS LOOP 
UPDATE STUDENT
SET TOTAL_SCORE=TOTAL_SCORE+100, NAMEI=CONCAT(NAMEI,' UPDATED')
WHERE IDI=COUNTER.IDI ;
 DBMS_OUTPUT.PUT_LINE('UPDATED');
END LOOP;
 END;
--*****************************************************
--******create while loop to update the data of student table**************
DECLARE 
STEP NUMBER(10)  :=12;
CURSOR MYSTUDENTS IS 
SELECT IDI,NAMEI ,TOTAL_SCORE
FROM STUDENT ;
BEGIN 
FOR COUNTER IN MYSTUDENTS LOOP 
UPDATE STUDENT
SET TOTAL_SCORE=TOTAL_SCORE+100, NAMEI=CONCAT(NAMEI,' UPDATED')
WHERE IDI=COUNTER.IDI ;
 DBMS_OUTPUT.PUT_LINE('UPDATED');
END LOOP;
WHILE STEP>8 
LOOP
 DBMS_OUTPUT.PUT_LINE('WHILE');
 STEP:=STEP-1;
 END LOOP;
END;
--************************************************************
--************print the value of counter****************
DECLARE 
COUNTER NUMBER :=1;
BEGIN 
WHILE COUNTER <=8 
LOOP
 DBMS_OUTPUT.PUT_LINE('COUNTER: ' || COUNTER);
 COUNTER :=COUNTER+1;
 END LOOP;
 END;
